<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-05T13:57:38+00:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">HTTP Content Negotiation in Golang reverse proxy</title><link href="http://localhost:4000/blog/content-encoding-golang-transport" rel="alternate" type="text/html" title="HTTP Content Negotiation in Golang reverse proxy" /><published>2021-12-04T01:00:00+00:00</published><updated>2021-12-04T01:00:00+00:00</updated><id>http://localhost:4000/blog/content-encoding-golang-transport</id><content type="html" xml:base="http://localhost:4000/blog/content-encoding-golang-transport">&lt;h2&gt;&lt;img src=&quot;/images/golang-transport/HTTPNego3.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;

&lt;h3 id=&quot;i-had-a-very-seemingly-simple-task-write-a-reverse-proxy-to-a-document-store&quot;&gt;I had a very (seemingly) simple task. Write a reverse proxy to a document store.&lt;/h3&gt;

&lt;p&gt;However an unexpected behavior made me dig deep about http content negotiation made by golang default implementation transport.&lt;/p&gt;

&lt;p&gt;The original code (using &lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;gin&lt;/a&gt;) was as simple as:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	remote:= some_remote_host
	proxy := httputil.NewSingleHostReverseProxy(remote)
	proxy.Director = func(req *http.Request) {
		req.Header = ctx.Request.Header
		req.Host = remote.Host
		req.URL.Scheme = remote.Scheme
		req.URL.Host = remote.Host
		req.URL.Path = ctx.Request.URL.Path
	}

	proxy.ServeHTTP(ctx.Writer, ctx.Request)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Via http 1.1, the reverse proxy worked ( the document was displayed correctly ) but the server exposed a panic stack strace.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;httputil: ReverseProxy read error during body copy: unexpected EOF

2021/12/04 16:47:40 [Recovery] 2021/12/04 - 16:47:40 panic recovered:
net/http: abort Handler
/usr/local/Cellar/go/1.17.2/libexec/src/net/http/httputil/reverseproxy.go:349 (0x12ba9a4)
(*ReverseProxy).ServeHTTP: panic(http.ErrAbortHandler)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WTF!?&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Two unanswered questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If httputil reverseproxy caused a panic while reading body, why is the body content displayed?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;why io.Read returned the unexpected EOF?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-is-the-body-content-displayed&quot;&gt;Why is the body content displayed?&lt;/h3&gt;

&lt;p&gt;Looking at httputil reverseproxy copyBuffer source code, we understand why the content is still displayed:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// copyBuffer returns any write errors or non-EOF read errors, and the amount
// of bytes written.
func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error) {
	if len(buf) == 0 {
		buf = make([]byte, 32*1024)
	}
	var written int64
	for {
		nr, rerr := src.Read(buf)
		if rerr != nil &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rerr != io.EOF &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rerr != context.Canceled {
			p.logf(&quot;httputil: ReverseProxy read error during body copy: %v&quot;, rerr)
		}
		if nr &amp;gt; 0 {
			nw, werr := dst.Write(buf[:nr])
			if nw &amp;gt; 0 {
				written += int64(nw)
			}
			if werr != nil {
				return written, werr
			}
			if nr != nw {
				return written, io.ErrShortWrite
			}
		}
		if rerr != nil {
			if rerr == io.EOF {
				rerr = nil
			}
			return written, rerr
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Read is called for the entire document returning Unexpected EOF on the last read. In case of error, the buffer is still written, and we obtain the complete body.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;why-did-ioread-return-unexpectedeof&quot;&gt;Why did io.Read return UnexpectedEOF?&lt;/h3&gt;

&lt;p&gt;First let’s find out which reader was chosen by default transport.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding&quot;&gt;Accept-Encoding&lt;/a&gt; request HTTP header indicates the content encoding (usually a compression algorithm) that the client can understand. The server uses content negotiation to select one of the proposal and informs the client of that choice with the Content-Encoding response header.&lt;/p&gt;

&lt;p&gt;The request headers from the browser that performed the call are the following:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8

Accept-Language: pt-PT,pt;q=0.8,en;q=0.5,en-US;q=0.3

Accept-Encoding: gzip, deflate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The reader is either &lt;a href=&quot;https://pkg.go.dev/compress/gzip&quot;&gt;compress/gzip&lt;/a&gt; or &lt;a href=&quot;https://pkg.go.dev/compress/flate&quot;&gt;compress/flate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Reverse proxy is using http.DefaultTransport which on &lt;a href=&quot;https://github.com/golang/go/blob/master/src/net/http/transport.go#L2190&quot;&gt;line 2190&lt;/a&gt; confirms the choice of gzip as reader.&lt;/p&gt;

&lt;p&gt;Gzip Reader implementation can be seen below:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Read implements io.Reader, reading uncompressed bytes from its underlying Reader.
func (z *Reader) Read(p []byte) (n int, err error) {
	if z.err != nil {
		return 0, z.err
	}

	n, z.err = z.decompressor.Read(p)
	z.digest = crc32.Update(z.digest, crc32.IEEETable, p[:n])
	z.size += uint32(n)
	if z.err != io.EOF {
		// In the normal case we return here.
		return n, z.err
	}

	// Finished file; check checksum and size.
	if _, err := io.ReadFull(z.r, z.buf[:8]); err != nil {
		z.err = noEOF(err)

		return n, z.err
	}

	digest := le.Uint32(z.buf[:4])
	size := le.Uint32(z.buf[4:8])
	if digest != z.digest || size != z.size {
		z.err = ErrChecksum
		return n, z.err
	}
	z.digest, z.size = 0, 0

	// File is ok; check if there is another.
	if !z.multistream {
		return n, io.EOF
	}
	z.err = nil // Remove io.EOF

	if _, z.err = z.readHeader(); z.err != nil {
		return n, z.err
	}

	// Read from next file, if necessary.
	if n &amp;gt; 0 {
		return n, nil
	}
	return z.Read(p)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;readHeader&lt;/strong&gt; method sparked my attention.&lt;/p&gt;

&lt;p&gt;Surely, if we requested file in gzip format, it must comply with &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1952#page-5&quot;&gt;gzip spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However… Several prints later… We confirm that the server didn’t comply with the given ‘Accept-Encoding’ of the client!&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// readHeader reads the GZIP header according to section 2.3.1.
// This method does not set z.err.
func (z *Reader) readHeader() (hdr Header, err error) {
	n, err := io.ReadFull(z.r, z.buf[:10])
	if err != nil {
		// RFC 1952, section 2.2, says the following:
		//	A gzip file consists of a series of &quot;members&quot; (compressed data sets).
		//
		// Other than this, the specification does not clarify whether a
		// &quot;series&quot; is defined as &quot;one or more&quot; or &quot;zero or more&quot;. To err on the
		// side of caution, Go interprets this to mean &quot;zero or more&quot;.
		// Thus, it is okay to return io.EOF here.
		fmt.Println(&quot;READ FULL ERROR &quot;, err, z.buf[0] != gzipID1, z.buf[1] != gzipID2, z.buf[2] != gzipDeflate)

		return hdr, err
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The puzzling &lt;strong&gt;unexpected EOF&lt;/strong&gt; is returned by read header call to &lt;strong&gt;io.ReadFull&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;None of the members follow gzip file format specification!&lt;/p&gt;

&lt;p&gt;This &lt;a href=&quot;https://go.dev/play/p/l2HmrW216OD&quot;&gt;small snippet&lt;/a&gt; confirms that an invalid binary format is detected using readHeader, which indeed returns unexpected EOF.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;correcting-the-reverse-proxy&quot;&gt;Correcting the reverse proxy&lt;/h3&gt;

&lt;p&gt;Unfortunately, we cannot change the server response so we will fix this panic on the reverse proxy.&lt;/p&gt;

&lt;p&gt;First let’s try to remove &lt;strong&gt;Accept-Encoding&lt;/strong&gt; header on &lt;strong&gt;proxy.Director&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, this approach does nothing.&lt;/p&gt;

&lt;p&gt;The default choice of &lt;a href=&quot;https://go.dev/src/net/http/transport.go#L2546&quot;&gt;http.DefaultTransport&lt;/a&gt; is still gzip as seen below :&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	// Ask for a compressed version if the caller didn't set their
	// own value for Accept-Encoding. We only attempt to
	// uncompress the gzip stream if we were the layer that
	// requested it.
	requestedGzip := false
	if !pc.t.DisableCompression &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		req.Header.Get(&quot;Accept-Encoding&quot;) == &quot;&quot; &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		req.Header.Get(&quot;Range&quot;) == &quot;&quot; &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
		req.Method != &quot;HEAD&quot; {
		// Request gzip only, not deflate. Deflate is ambiguous and
		// not as universally supported anyway.
		// See: https://zlib.net/zlib_faq.html#faq39
		//
		// Note that we don't request this for HEAD requests,
		// due to a bug in nginx:
		//   https://trac.nginx.org/nginx/ticket/358
		//   https://golang.org/issue/5522
		//
		// We don't request gzip if the request is for a range, since
		// auto-decoding a portion of a gzipped document will just fail
		// anyway. See https://golang.org/issue/8923
		requestedGzip = true
		req.extraHeaders().Set(&quot;Accept-Encoding&quot;, &quot;gzip&quot;)
	}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are left with two choices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;setting &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding#directives&quot;&gt;Accept-Encoding Directive&lt;/a&gt; as identity, which won’t modify or compress the response server body.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://go.dev/src/net/http/transport.go#L173&quot;&gt;disable compression of Transport&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;both-worked-yes-another-panic-avoided&quot;&gt;Both worked… YES! Another panic avoided!&lt;/h3&gt;

&lt;p&gt;My inner curiosity is satisfied! This was fun :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This blog was originally posted on &lt;a href=&quot;https://medium.com/@seomisw/http-content-negotiation-in-golang-reverse-proxy-6191f14ecdcb&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;–be sure to follow and clap!&lt;/p&gt;</content><author><name></name></author><summary type="html">Understanding golang transport behavior for http content negotiation.</summary></entry><entry><title type="html">Bash + ElasticSearch MultiSearch</title><link href="http://localhost:4000/blog/kibana-surrounding-bash" rel="alternate" type="text/html" title="Bash + ElasticSearch MultiSearch" /><published>2021-04-10T02:00:00+01:00</published><updated>2021-04-10T02:00:00+01:00</updated><id>http://localhost:4000/blog/kibana-surrounding-bash</id><content type="html" xml:base="http://localhost:4000/blog/kibana-surrounding-bash">&lt;p&gt;&lt;img src=&quot;/images/elastic-bash/shell-script-logo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;correlating-logs-on-elasticsearch-using-kibana-is-usually-pretty-easy&quot;&gt;Correlating logs on ElasticSearch using Kibana is usually pretty easy.&lt;/h3&gt;

&lt;p&gt;In Distributed Systems, if &lt;strong&gt;System Y&lt;/strong&gt; performs a request to &lt;strong&gt;System X&lt;/strong&gt;, you can use attributes like &lt;strong&gt;transaction_id&lt;/strong&gt;, &lt;strong&gt;trace_id&lt;/strong&gt; and &lt;strong&gt;span_id&lt;/strong&gt; to navigate all logs belonging to a particular trace, and vice-versa.&lt;/p&gt;

&lt;p&gt;But sometimes you have systems interacting which have &lt;strong&gt;no good log correlation&lt;/strong&gt;. You could be still in MVP phase, or the system calling is a legacy system that no one want to touch, or even that the logs between systems are not structured in a way that is easy to query data.&lt;/p&gt;

&lt;p&gt;You’ll find yourself looking in surrounding documents near the log you are interested in, or blindingly looking in some other system logs for some information that helps you understand some situation… and if your systems produce &lt;strong&gt;a lot&lt;/strong&gt; of log data, finding the information you want can easily feel like finding a needle on a waystack.&lt;/p&gt;

&lt;p&gt;Well… i found myself in this situation this week ¯(シ)/¯ .&lt;/p&gt;

&lt;p&gt;Fortunately, the information i was searching was always on the surrounding documents of some specific log.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So i thought: Ok, I’ll spend 20 min of my weekend automating this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;the-basic-idea&quot;&gt;The basic idea&lt;/h2&gt;

&lt;p&gt;Should be simple enough: Open browser developer tools, click the Kibana log link of &lt;code class=&quot;highlighter-rouge&quot;&gt;View Surrounding Documents&lt;/code&gt;, &lt;a href=&quot;https://everything.curl.dev/usingcurl/copyas&quot;&gt;copy as curl&lt;/a&gt;. Tune some of the request fields, perform the request and  use &lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt; to look up the fields i want.&lt;/p&gt;

&lt;p&gt;The original curl (without headers) is similar to this one:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl 'https://&lt;span class=&quot;nt&quot;&gt;&amp;lt;some_endpoint&amp;gt;&lt;/span&gt;/_msearch?rest_total_hits_as_int=true&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;ignore_throttled=true'
--data-raw $'{&quot;index&quot;:&quot;logstash-default*&quot;,&quot;ignore_unavailable&quot;:true,
&quot;preference&quot;:1618072435228}\n{&quot;size&quot;:5,&quot;search_after&quot;:[1618071886078,23742571],
&quot;sort&quot;:[{&quot;@timestamp&quot;:{&quot;order&quot;:&quot;asc&quot;,&quot;unmapped_type&quot;:&quot;boolean&quot;}},{&quot;_doc&quot;:{&quot;order&quot;:&quot;desc&quot;,&quot;unmapped_type&quot;:&quot;boolean&quot;}}],
&quot;version&quot;:true,&quot;_source&quot;:{&quot;excludes&quot;:[]},&quot;stored_fields&quot;:[&quot;*&quot;],&quot;script_fields&quot;:{},
&quot;docvalue_fields&quot;:[{&quot;field&quot;:&quot;@timestamp&quot;,&quot;format&quot;:&quot;date_time&quot;}],
&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;constant_score&quot;:{&quot;filter&quot;:{&quot;range&quot;:{&quot;@timestamp&quot;:{&quot;format&quot;:&quot;epoch_millis&quot;,&quot;gte&quot;:1618071886078,&quot;lte&quot;:1618158286078}}}}}],
&quot;filter&quot;:[],&quot;should&quot;:[],&quot;must_not&quot;:[]}},&quot;timeout&quot;:&quot;30000ms&quot;}\n{&quot;index&quot;:&quot;logstash-default*&quot;,&quot;ignore_unavailable&quot;:true,&quot;preference&quot;:1618072435228}\n
{&quot;size&quot;:5,&quot;search_after&quot;:[1618071886078,23742571],&quot;sort&quot;:[{&quot;@timestamp&quot;:{&quot;order&quot;:&quot;desc&quot;,&quot;unmapped_type&quot;:&quot;boolean&quot;}},
{&quot;_doc&quot;:{&quot;order&quot;:&quot;asc&quot;,&quot;unmapped_type&quot;:&quot;boolean&quot;}}],&quot;version&quot;:true,
&quot;_source&quot;:{&quot;excludes&quot;:[]},&quot;stored_fields&quot;:[&quot;*&quot;],&quot;script_fields&quot;:{},
&quot;docvalue_fields&quot;:[{&quot;field&quot;:&quot;@timestamp&quot;,&quot;format&quot;:&quot;date_time&quot;}],
&quot;query&quot;:{&quot;bool&quot;:{&quot;must&quot;:[{&quot;constant_score&quot;:{&quot;filter&quot;:{&quot;range&quot;:{
&quot;@timestamp&quot;:{&quot;format&quot;:&quot;epoch_millis&quot;,&quot;lte&quot;:1618071886078,&quot;gte&quot;:1617985486078}}}}}],
&quot;filter&quot;:[],&quot;should&quot;:[],&quot;must_not&quot;:[]}},&quot;timeout&quot;:&quot;30000ms&quot;}\n'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, this big curl thing that you probably cannot see in your mobile phone screen, uses &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html&quot;&gt;multisearch&lt;/a&gt; to execute several searches with a single API request.&lt;/p&gt;

&lt;p&gt;The request makes use of the &lt;a href=&quot;http://ndjson.org/&quot;&gt;newline delimited JSON&lt;/a&gt; format (NDJSON). In simpler terms, it follows the following structure:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Header\n
Body\n
Header\n
Body\n
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is important and justifies why the curl data raw is &lt;strong&gt;–data-raw $’{}’&lt;/strong&gt;. instead of &lt;strong&gt;–data-raw ‘{}’&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The notation $’…’ is a special form of quoting a string. Strings that are scanned for &lt;a href=&quot;https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html#ANSI_002dC-Quoting&quot;&gt;ANSI C like escape sequences&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So in a quick look i could see that two headers and two body, so it is performing &lt;strong&gt;two&lt;/strong&gt; searches.&lt;/p&gt;

&lt;p&gt;Each header contains the following information:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logstash-default*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ignore_unavailable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;preference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12353564645&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;index: the index we are using&lt;/li&gt;
  &lt;li&gt;preference: preference of which shard copies on which to execute the search&lt;/li&gt;
  &lt;li&gt;ignore_unavailable: missing or closed indices are not included in the response if true (which is the case).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The two bodies have a similar format:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;search_after&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1618071886078&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23742571&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sort&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;asc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unmapped_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_doc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;order&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;unmapped_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;boolean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;_source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;excludes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stored_fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;script_fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;docvalue_fields&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;field&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;date_time&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;query&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;bool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;must&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;constant_score&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;range&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;epoch_millis&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;gte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1618071886078&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;lte&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1618158286078&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;should&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;must_not&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;30000ms&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important fields are the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;size : the number of hits to return&lt;/li&gt;
  &lt;li&gt;search_after: works as a live cursor, where we have [offset,limit]&lt;/li&gt;
  &lt;li&gt;sort : we are sorting by timestamp asc&lt;/li&gt;
  &lt;li&gt;query: it’s using a range query to return documents within the provided range.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now it is clear what the curl is doing: it is using the unix timestamp of a particular record to retrieve the 5 previous and following records.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So, if we give it the unix timestamp of the record, we should be able to obtain the neibouring information.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;now-that-we-understand-the-request-we-need-to-retrieve-the-information-we-are-looking-for-on-surrounding-docs&quot;&gt;Now that we understand the request, we need to retrieve the information we are looking for on surrounding docs.&lt;/h3&gt;

&lt;p&gt;For that, i have choosen the following &lt;a href=&quot;https://github.com/stedolan/jq&quot;&gt;jq&lt;/a&gt; filter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jq '.responses[0].hits.hits[] | ._source.payload.fields.&amp;lt;field_i_am_looking_for&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we use the first array index of responses and we will return all of the elements of an array &lt;strong&gt;hits&lt;/strong&gt;. We use the &lt;a href=&quot;https://stedolan.github.io/jq/manual/#Basicfilters&quot;&gt;Pipe&lt;/a&gt; operator to run a filter for each of those results. In my case i want to retrieve fields _source.payload.fields.&lt;the field=&quot;&quot; that=&quot;&quot; i=&quot;&quot; am=&quot;&quot; looking=&quot;&quot; for=&quot;&quot;&gt;_.&lt;/the&gt;&lt;/p&gt;

&lt;h3 id=&quot;good-now-we-are-ready-to-write-some-bash&quot;&gt;Good! Now, we are ready to write some bash.&lt;/h3&gt;

&lt;p&gt;I want to receive as input three fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an unix timestamp used to look around.&lt;/li&gt;
  &lt;li&gt;the number of records i’ll want to look around.&lt;/li&gt;
  &lt;li&gt;the field i am looking for.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To handle user input, i’ve written the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helpFunction&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; --sort &amp;lt;sort_id&amp;gt; --around &amp;lt;number_of_entries&amp;gt; --field &amp;lt;the field name i am looking for&amp;gt;&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--sort sort field found on json entry&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--size number of surrounding documents&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;--field field you are looking&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ARGUMENT_LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;sort&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;around&quot;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;field&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# read arguments&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;getopt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--longoptions&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%s:,&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARGUMENT_LIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;basename&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--options&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$opts&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-gt&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;argOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;shift &lt;/span&gt;2
            &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;--around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;argTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;shift &lt;/span&gt;2
            &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;--field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;argThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;shift &lt;/span&gt;2
            &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Print helpFunction in case parameters are empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argOne&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argTwo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argThree&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Some or all of the parameters are empty&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   helpFunction
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With sort input, we need to calculate the around timestamps:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;around_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;86400000&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;around_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$argOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1985122&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we just need to call the curl!&lt;/p&gt;

&lt;p&gt;Remeber that the notation $’…’ is being use on &lt;code class=&quot;highlighter-rouge&quot;&gt;data-raw&lt;/code&gt;. That means that each user input variable added to the curl body needs the notations $’…’.&lt;/p&gt;

&lt;p&gt;So this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl something &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'{&quot;somefield1&quot;:'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argOne&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$',&quot;somefield2&quot;:'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argTwo&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl something &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'{&quot;somefield1&quot;:'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argOne&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;',&quot;somefield2&quot;:'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$argTwo&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Did you notice that single &lt;strong&gt;$&lt;/strong&gt; after the variable and before the string?&lt;/p&gt;

&lt;p&gt;So all together, the gist can be found &lt;a href=&quot;https://gist.github.com/psimoesSsimoes/18d7e478d010994d9f5bb3907516dbf6&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;and-the-main-lesson-is--words-of-the-form-string-are-treated-specially-the-word-expands-to-string-with-backslash-escaped-characters-replaced-as-specified-by-the-ansi-c-standard&quot;&gt;And the main lesson is : Words of the form $’string’ are treated specially. The word expands to string, with backslash-escaped characters replaced as specified by the ANSI C standard.&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;This blog was originally posted on &lt;a href=&quot;https://seomisw.medium.com/bash-elasticsearch-multisearch-5123603af691&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;–be sure to follow and clap!&lt;/p&gt;</content><author><name></name></author><summary type="html">Trying to automate common searches on ElasticSearch using Bash.</summary></entry><entry><title type="html">My Advent Of Rust, Day 4</title><link href="http://localhost:4000/blog/my-advent-of-rust-day-4" rel="alternate" type="text/html" title="My Advent Of Rust, Day 4" /><published>2020-12-13T01:00:00+00:00</published><updated>2020-12-13T01:00:00+00:00</updated><id>http://localhost:4000/blog/my-advent-of-rust-day-4</id><content type="html" xml:base="http://localhost:4000/blog/my-advent-of-rust-day-4">&lt;p&gt;&lt;img src=&quot;/images/advent-of-rust/advent_of_rust.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;ive-always-considered-programming-challenges-a-fun-way-of-experimenting-new-languages&quot;&gt;I’ve always considered programming challenges a fun way of experimenting new languages.&lt;/h1&gt;

&lt;p&gt;For this edition of advent of code (2020), i decided i would give &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; a try.&lt;/p&gt;

&lt;p&gt;Rust really makes your head spin a bit with supposedly trivial problems (and this is a good thing!).&lt;/p&gt;

&lt;p&gt;This is mainly because programming in &lt;strong&gt;Rust requires you to think differently&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Replicating patterns that are common in other languages is tricky and sometimes quite hard or even impossible.&lt;/p&gt;

&lt;p&gt;Day 4 was a good example, so let’s examine the &lt;a href=&quot;https://adventofcode.com/2020/day/4&quot;&gt;challenge&lt;/a&gt;, which i will try to resume:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have a big string input, containing representations of passports.&lt;/li&gt;
  &lt;li&gt;On double newline, you have a passport.&lt;/li&gt;
  &lt;li&gt;Each &lt;strong&gt;valid&lt;/strong&gt; passport consists of the following fields: “byr”, “iyr”, “eyr”, “hgt”, “hcl”, “ecl”, “pid”.&lt;/li&gt;
  &lt;li&gt;Find all valid passports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll, first lets transform the input into something useful. This is the “similar” part of the Rust code to the rest of the other languages.&lt;/p&gt;

&lt;p&gt;I’m sure there would be many ways of doing this but i have chosen:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input_day_four.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so i have copied the input into a file (as a noobie, i prefered not to perform an http request :p ), read it to a String (unwrap to obtain the string is unsafe an discouraged, i know. but since i am controling the input, it is sufficient) and then split it to obtain each passport.&lt;/p&gt;

&lt;p&gt;Why not doing it in one line like :&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input_day_four.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Well… because using &lt;strong&gt;unwrap creates a temporary which is freed while still in use&lt;/strong&gt;. And in Rust this means that i need to create a new variable if i want to continue.&lt;/p&gt;

&lt;p&gt;So how do i verify which passports are valid?&lt;/p&gt;

&lt;p&gt;Using a language like &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;, i would probably loop the separated strings, find the index of &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; and then try to delete an entry using the index. Then i would assert if the len of the map was equal to zero. If yes, then it is a valid passport. That could be represented as such:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;validPassportCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;byr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;iyr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;eyr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;hgt&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;hcl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;ecl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;':'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		  	&lt;span class=&quot;nb&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;validPassportCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;another way would be to split whitespace an find the strings starting with the desired fields like so:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;validPassportCounter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;byr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
			 &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hgt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hcl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ecl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HasPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;control&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;validPassportCounter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Using these patterns proved to be quite challenging in Rust. I kept fighting the compiler, and the compiler kept winning.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So i went back to sketching… what was i really trying to do?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have a vector of references to strings to which i wanted to filter the ones containing the right values and then count the collected values.&lt;/p&gt;

&lt;p&gt;Looking at &lt;a href=&quot;https://doc.rust-lang.org/std/iter/struct.Filter.html#method.count&quot;&gt;Iter&lt;/a&gt; i found that using an iterator i could &lt;a href=&quot;https://doc.rust-lang.org/std/iter/struct.Filter.html&quot;&gt;filter&lt;/a&gt; elements with a predicate and then &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count&quot;&gt;count&lt;/a&gt; the filtered entries.&lt;/p&gt;

&lt;p&gt;Horaay!&lt;/p&gt;

&lt;p&gt;So i am on to something. I wrote:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_passports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So now i only need a predicate that filters the strings i need!&lt;/p&gt;

&lt;p&gt;the predicate could be similar to the second golang approach:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_validity_part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;byr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hgt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hcl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ecl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;.split_ascii_whitespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;.any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passport_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passport_field&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.starts_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so again i ask for my new BFF &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html&quot;&gt;Iterator&lt;/a&gt;, which holds an &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.all&quot;&gt;all&lt;/a&gt; method that tests if every element of passport verifies a predicate.&lt;/p&gt;

&lt;p&gt;The predicate i want is for each &lt;strong&gt;field of a passport&lt;/strong&gt;, determine if the passport_field starts with any of the values of &lt;strong&gt;fields&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For that, i’ve use a  &lt;a href=&quot;https://doc.rust-lang.org/std/primitive.str.html#method.split_ascii_whitespace&quot;&gt;split_ascii_whitespace&lt;/a&gt; to obtain the passport fields, and &lt;a href=&quot;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any&quot;&gt;any&lt;/a&gt; to verify passport correctness.&lt;/p&gt;

&lt;p&gt;Voila!&lt;/p&gt;

&lt;p&gt;Now gluing it all together…  &lt;strong&gt;it compiles!!!!! YES!! We are the champions!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;i just had to make every passport pass the predicate &lt;strong&gt;check_validity_part_1&lt;/strong&gt; that i wrote previously:&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read_to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input_day_four.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_passports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_validity_part_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_passports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and this piece gives the correct input to the first challenge of the 4 day :)&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some lessons to myself: don’t fight the compiler. If your approach/pattern is not working, it is probably because you probably cannot use this same pattern using Rust. Stop, re-evaluate, read the documentation, and surely you’ll find a way of solving the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;if-this-was-the-optimal-approach-well-that-should-be-re-evaluated-once-i-have-a-better-knowledge-of-rust-&quot;&gt;If this was the optimal approach… well, that should be re-evaluated, once i have a better knowledge of Rust :)&lt;/h3&gt;

&lt;p&gt;This blog was originally posted on &lt;a href=&quot;https://seomisw.medium.com/my-advent-of-rust-day-4-bc3a9e76a85b&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;–be sure to follow and clap!&lt;/p&gt;</content><author><name></name></author><summary type="html">Notes on day 4 of advent of code made in Rust.</summary></entry><entry><title type="html">Image Dataset for Litter Detection</title><link href="http://localhost:4000/blog/taco-dataset" rel="alternate" type="text/html" title="Image Dataset for Litter Detection" /><published>2020-05-17T02:00:00+01:00</published><updated>2020-05-17T02:00:00+01:00</updated><id>http://localhost:4000/blog/taco-dataset</id><content type="html" xml:base="http://localhost:4000/blog/taco-dataset">&lt;p&gt;&lt;img src=&quot;/images/taco/taco.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;today-i-want-to-talk-a-bit-about-a-project-from-the-mind-of-the-idealist-and-wizard-pedro-proença&quot;&gt;Today i want to talk a bit about a project from the mind of the idealist and wizard &lt;a href=&quot;https://pedropro.github.io/&quot;&gt;Pedro Proença&lt;/a&gt;.&lt;/h1&gt;

&lt;p&gt;It is called &lt;a href=&quot;http://tacodataset.org/&quot;&gt;TACO&lt;/a&gt;, which stands for Trash Annotations in Context, and it is an open image dataset for litter detection, similar to &lt;a href=&quot;http://cocodataset.org/&quot;&gt;COCO object segmentation&lt;/a&gt;. It contains photos of litter taken under diverse environments, from tropical beaches to London streets. These images are manually labeled and segmented according to a hierarchical taxonomy to train and evaluate object detection algorithms.&lt;/p&gt;

&lt;h2 id=&quot;why-is-taco-needed&quot;&gt;Why is TACO needed?&lt;/h2&gt;

&lt;p&gt;Humans have been trashing planet Earth from the bottom of &lt;a href=&quot;https://www.nationalgeographic.com/news/2018/05/plastic-bag-mariana-trench-pollution-science-spd/&quot;&gt;Mariana trench&lt;/a&gt; to &lt;a href=&quot;https://www.livescience.com/63061-how-much-trash-mount-everest.html&quot;&gt;Mount Everest&lt;/a&gt;. &lt;a href=&quot;http://www3.weforum.org/docs/WEF_The_New_Plastics_Economy.pdf&quot;&gt;Every minute, at least 15 tonnes of plastic waste leak into the ocean&lt;/a&gt;, that is equivalent to the capacity of one garbage truck. We have all seen the impact of this behaviour to wildlife on images of turtles choking on plastic bags and birds filled with bottle caps. Recent studies have also found microplastics in human stools. These should be kept in the recycling chain not in our food chain.&lt;/p&gt;

&lt;p&gt;We believe AI has an important role to play. Think of drones surveying trash, robots picking up litter, anti-littering video surveillance and AR to educate and help humans to separate trash. That is our vision. All of this is now possible with the recent advances of &lt;a href=&quot;https://www.youtube.com/watch?v=Cgxsv1riJhI&quot;&gt;deep learning&lt;/a&gt;. However, to learn accurate trash detectors, deep learning needs many &lt;a href=&quot;https://www.youtube.com/watch?v=40riCqvRoMs&quot;&gt;annotated images&lt;/a&gt;. While there are a few other trash datasets, we believe these are not enough and therefore we created TACO.&lt;/p&gt;

&lt;h2 id=&quot;taco-features&quot;&gt;TACO Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Object segmentation. Typically used bounding boxes are not enough for certain tasks, e.g., robotic grasping&lt;/li&gt;
  &lt;li&gt;Images under free licence. You can do whatever you want with TACO as long as you cite us.&lt;/li&gt;
  &lt;li&gt;Background annotation. TACO covers many environments which are tagged for convenience.&lt;/li&gt;
  &lt;li&gt;Object context tag. Not all objects in TACO are strictly litter. Some objects are handheld or not even trash yet. Thus, objects are tagged based on context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-dataset&quot;&gt;The Dataset&lt;/h2&gt;

&lt;p&gt;TACO  contains  high  resolution  images,  taken  mostly  by  mobile  phones.  These  are  managed  and stored by Flickr, whereas our server manages the annotations and  runs  periodically  a  crawler  to  collect  more  potential images of litter. Images are labeled with the scene tags,  to  describe  their  background  –  these  are  not mutually exclusive – and litter instances are segmented and labeled using &lt;a href=&quot;http://tacodataset.org/taxonomy&quot;&gt;a hierarchical taxonomy with 60 categories of litter  which  belong  to  28  super  (top)  categories  ,including  a  special  category:Unlabeled litterforobjects  that  are  either  ambiguous  or  not  covered  by  the other categories&lt;/a&gt;. This is fundamentally different from other datasets  (e.g.  COCO)  where  distinction  between  classes  is key.  Here, all  objects  can  be in  fact  classified as  one  class: &lt;strong&gt;litter&lt;/strong&gt;.  Furthermore,  it  may  be  impossible  to  distinguish visually  between  two  classes,  e.g.,  plastic  bottle  and  glassbottle. Given this ambiguity and the class imbalance, classes can be rearranged to suit a particular task.&lt;/p&gt;

&lt;h3 id=&quot;how-can-one-help&quot;&gt;How can one help?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Annotations are key to improve the dataset and TACO is officially open for &lt;a href=&quot;http://tacodataset.org/annotate&quot;&gt;new annotations&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Litter image submission is also important and can be done &lt;a href=&quot;http://tacodataset.org/upload&quot;&gt;here&lt;/a&gt; or to Flickr following our &lt;a href=&quot;http://tacodataset.org/flickr_instructions&quot;&gt;instructions&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use dataset: If you are interested in machine learning, check out &lt;a href=&quot;https://github.com/pedropro/TACO&quot;&gt;our repo&lt;/a&gt; and start using this dataset in your experiments. We would love to hear about your results.&lt;/li&gt;
  &lt;li&gt;Feedback is appreciated. Let us know if you spot any issue with the dataset or our tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This blog was originally posted on &lt;a href=&quot;https://medium.com/@seomisw/image-dataset-for-litter-detection-7f1cab9e7fa1&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;–be sure to follow and clap!&lt;/p&gt;</content><author><name></name></author><summary type="html">Open image dataset of waste in the wild.</summary></entry><entry><title type="html">Easy search in VIM</title><link href="http://localhost:4000/blog/vim-search" rel="alternate" type="text/html" title="Easy search in VIM" /><published>2020-05-09T01:00:00+01:00</published><updated>2020-05-09T01:00:00+01:00</updated><id>http://localhost:4000/blog/vim-search</id><content type="html" xml:base="http://localhost:4000/blog/vim-search">&lt;p&gt;&lt;img src=&quot;/images/vim_search/vimgrep.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;easy-search-in-vim&quot;&gt;Easy search in VIM&lt;/h2&gt;

&lt;p&gt;Every developer needs a fast way to search for a current word in multiple files.&lt;/p&gt;

&lt;p&gt;As a &lt;a href=&quot;https://github.com/vim&quot; target=&quot;_blank&quot;&gt;vim&lt;/a&gt; user the way i used to do it would be in the form :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:Ack! &amp;lt; word &amp;gt; &amp;lt; directory_where_i_want_to_search &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Surely there must be a better way!&lt;/p&gt;

&lt;p&gt;That way was presented to me by my vim partner in crime, Mr João Seabra.
He wrote a small &lt;a href=&quot;https://learnvimscriptthehardway.stevelosh.com/chapters/23.html&quot; target=&quot;_blank&quot;&gt;vim function&lt;/a&gt; which i find particularly useful for my daily workflow:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s:GrepOperator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; wordUnderCursor &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;cword&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ack! &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shellescape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;wordUnderCursor&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:var_default&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;copen&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;redraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s understand how it works:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; wordUnderCursor &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;cword&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we start by declaring a variable which will hold the word under cursor&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;silent&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;execute&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Ack! &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shellescape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;wordUnderCursor&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:var_default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we execute the shell command silently (in my case i like to use a code searching tool similar to ack called the_silver_searcher) providing the wordUnderCursor and the directory where we want where we want to search (which is stored in a global variable var_default)&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;copen&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;redraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we open the quickfix window and we force a screen refresh&lt;/p&gt;

&lt;p&gt;Note that you could any grep-like tool you prefer instead of &lt;strong&gt;Ack&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I also recomend reading &lt;strong&gt;help cword&lt;/strong&gt; to get more options. For my vimrc, I needed &lt;strong&gt;cWORD&lt;/strong&gt; to grab the whitespace delimited text under the cursor.&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-fill-the-global-variable-with-the-directory-to-search-in&quot;&gt;How do you fill the global variable with the directory to search in?&lt;/h2&gt;

&lt;p&gt;In my case i find it useful to set it to the &lt;strong&gt;current working directory&lt;/strong&gt;. That can be achieved by setting in your vimrc the following line:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g:var_default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-do-we-call-the-function-quickly&quot;&gt;How do we call the function quickly?&lt;/h2&gt;

&lt;p&gt;for that we need a mapping!  That is achieved with the following lines:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;z &lt;span class=&quot;p&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;GrepOperator&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;noremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;z &lt;span class=&quot;p&quot;&gt;:&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;SID&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;GrepOperator&lt;span class=&quot;p&quot;&gt;()&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;with these lines i can call the vim function in normal and visual mode. In my case, you can see that i map it for &amp;lt; leader &amp;gt; z.&lt;/p&gt;

&lt;p&gt;To wrap it up, a fast way to navigate the result documents can be done with the following mappings:&lt;/p&gt;

&lt;div class=&quot;language-vim highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cnext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cprevious&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;CR&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;using &lt;strong&gt;&amp;lt; leader &amp;gt;j&lt;/strong&gt; , we navigate to the next result.&lt;/p&gt;

&lt;p&gt;using &lt;strong&gt;&amp;lt; leader &amp;gt;k&lt;/strong&gt; , we navigate to the previous result.&lt;/p&gt;

&lt;p&gt;That’s it! Now we have a quick and practical way of searching words in vim!&lt;/p&gt;

&lt;h3 id=&quot;do-you-have-a-differentbetter-way-of-achieving-the-same-result&quot;&gt;Do you have a different/better way of achieving the same result?&lt;/h3&gt;
&lt;h3 id=&quot;i-would-love-to-hear-about-it-&quot;&gt;I would love to hear about it :)&lt;/h3&gt;

&lt;p&gt;This blog was originally posted on &lt;a href=&quot;https://link.medium.com/QyA2B23on6&quot; target=&quot;_blank&quot;&gt;Medium&lt;/a&gt;–be sure to follow and clap!&lt;/p&gt;</content><author><name></name></author><summary type="html">VIM + Functions + ACK == WIN!.</summary></entry></feed>